<script type="text/javascript" src="{{ path_for("plugin_res", {"plugin": module_id, "path": "js/maps.bundle.js"}) }}"></script>
<script type="text/javascript" src="{{ path_for("plugin_res", {"plugin": module_id, "path": "leaflet-legendcontrol/L.Control.Legend.js"}) }}"></script>
<script type="text/javascript" src="{{ path_for("plugin_res", {"plugin": module_id, "path": "leaflet-control-osm-geocoder/Control.OSMGeocoder.js"}) }}"></script>
<script type="text/javascript">

    /**
     * Returns element height, including margins
     */
    function _eltRealSize(_elt) {
        var _s = 0;
        _s += _elt.outerHeight();
        _s += parseFloat(_elt.css('margin-top').replace('px', ''));
        _s += parseFloat(_elt.css('margin-bottom').replace('px', ''));
        _s += parseFloat(_elt.css('padding-top').replace('px', ''));
        _s += parseFloat(_elt.css('padding-bottom').replace('px', ''));
        return _s;
    }

    /**
     * Rewrite maps height
     */
    function _hresize() {
        var wheight = $(window).height();
        var _oSize = 0;

        //rÃ©cuperation de la taille des autres lignes
        $('#map').parents('section').siblings(':not(script)').each(function(){
            var _this = $(this);
            if ( !_this.hasClass('ui-dialog') ) {
                _oSize += _eltRealSize($(this));
            }
        });
        if ( $('#content').length > 0 ) {
            _oSize += _eltRealSize($('footer'));
            _oSize += parseFloat($('#content').css('padding-top').replace('px', ''));
            _oSize += parseFloat($('#content').css('padding-bottom').replace('px', ''));
        }

        //calcul et application de la nouvelle taille
        var newHeight = Math.floor(wheight - _oSize);
        var minHeight = 300;
        if ( newHeight < minHeight ) {
            newHeight = minHeight;
        }
        $("#map").css("height", newHeight + "px");
    }

    /**
     * Galette specific marker icon
     */
    var galetteIcon = L.icon({
        iconUrl: '{{ path_for("plugin_res", {"plugin": module_id, "path": "leaflet-1.2.0/images/marker-galette.png"}) }}',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });
    var galetteProIcon = L.icon({
        iconUrl: '{{ path_for("plugin_res", {"plugin": module_id, "path": "leaflet-1.2.0/images/marker-galette-pro.png"}) }}',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

{% if cur_route != 'maps_map' %}
    function _iLiveHere(_id){
        $('#' + _id).click(function(e, f,g){
            var _a = $(this);
            var _latlng = _a.data('latlng');
            $.ajax({
                url: '{% if mymap is not defined %}{{ path_for("maps_ilivehere") }}{% else %}{{ path_for("maps_ilivehere", {"id": member.id}) }}{% endif %}',
                type: 'POST',
                data: {
                    latitude: _latlng.lat,
                    longitude: _latlng.lng
                },
                {% include "elements/js/loader.js.twig" %},
                success: function(res){
                    $('body').modal('alert',{
                        content: res.message,
                        handler: function() {
                            window.location.reload();
                        }
                     });
                },
                error: function(){
                    alert("{{ _T("An error occured during 'I live here' process :(", "maps")|e("js") }}")
                }
            });
            return false;
        });
    }
{% endif %}

    $(function(){
        var _legendhtml = $('#legende').clone();
        _legendhtml.find('h1').remove()
        $('#legende').remove();

        _hresize();

        var _lat = {% if town is defined %}{{ town['latitude'] }}{% else %}46.830133640447386{% endif %};
        var _lon = {% if town is defined %}{{ town['longitude'] }}{% else %}2.4609375{% endif %};
        var map = L.map(
            'map', {
                fullscreenControl: true,
                fullscreenControlOptions: {
                    title: "{{ _T("Display map in full screen", "maps" )|e("js") }}",
                    forceSeparateButton:true
                }
            }
        ).setView([_lat, _lon], {% if town is defined %}12{% else %}6{% endif %});

        var osmGeocoder = new L.Control.OSMGeocoder({
            collapsed: false,
{% if cur_route == 'maps_localize_member' and town is not defined %}
            placeholder: '{{ _T("Search your town...", "maps")|e("js") }}',
{% else %}
            placeholder: '{{ _T("Search a town...", "maps")|e("js") }}',
{% endif %}
            text: '{{ _T("Search", "maps")|e("js")}}',
            callback: function (results) {
                if (results.length == 0) {
                    var _div = $('<div title="{{ _T("No result found", "maps")|e("js") }}">{{ _T("Sorry, that town could not be found.", "maps")|e("js")}}</div>');
                    _div.dialog();
                    return;
                }

                // get coordinates for result
                var coords = L.latLng(results[0].lat,results[0].lon);

                // create a marker for result
                var marker = L.marker(coords);

                // add result object to map and zoom to
                this._map.addLayer(marker).setView(coords,9);
            }
        });
        map.addControl(osmGeocoder);

        L.control.legend({
            strings: {
                title: '{{ _T("Show legend")|e('js')}}'
            }
        }).addTo(map);

        _legend = L.control({
            position: 'bottomright'
        });
        _legend.onAdd = function (map) {
            var div = L.DomUtil.create('div', 'info legend');
            div.innerHTML = _legendhtml.html();
            return div;
        }
        _legend.addTo(map);

{% if cur_route == 'maps_localize_member' or cur_route == 'maps_mymap' %}
        L.control.locate({
            strings: {
                title: '{{ _T("Show me where I am", "maps")|e("js") }}',
                popup: 'SELECTPOPUP',
                outsideMapBoundsMsg: '{{ _T("You seem located outside the boundaries of the map", "maps")|e("js")}}'
            }
        }).addTo(map);
{% endif %}

        L.tileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {
            maxZoom: 18,
            attribution: '{{ _T("Map data (c)", "maps")|e("js")}} <a href="http://openstreetmap.org">{{ _T("OpenStreetMap contributors", "maps")|e("js")}}</a>, {{ _T("Imagery (c)", "maps")|e("js")}} <a href="https://cartodb.com/attributions">CartoDB</a>'
        }).addTo(map);

        try {
            _mapsBinded(map);
        } catch (err) {
            //fortunately, nothing to do here.
            //_mapsBinded function can be missing
        }
    });
</script>

